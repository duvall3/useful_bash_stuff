" vimrc -- startup customization options for vim

" basic options
set background=dark	" set syntax highlighting for dark terminal backgrounds
syn on			" activate syntax highlighting
set shiftwidth=2	" indentation defaults to 2 spaces
set autoindent		" automatic indentation
set ignorecase		" ignore case in searches
set smartcase		" don't ignore case when search string contains any uppercase
set shortmess-=S	" include count in search
set hlsearch		" turn on search highlighting
set breakindent		" indent wrapped lines
let &briopt="shift:3"	" adjust breakindent
set nowrap

" sort files by time in :Explore (netrw browser)
let g:netrw_sort_by = "time"
" except for ordered_chapters
if getcwd()=~"ordered_chapters"
  let g:netrw_sort_by="name"
endif

" set 'p' as 'prev', so that ':n' and ':p' scroll forwards & backwards through open files:
cabbrev p prev

" wrapping:
"" in a single command, 'Wrap':
command! Wrap set wrap linebreak nolist " 'list' is off by default; just making sure
"set nowrap
"" alternate option: set wrap linebreak nolist -- hopefully, this will display breaks at words w/o altering the actual file
"Wrap

" mapping:
" moving lines
noremap - ddp
noremap _ ddkP
" spacebar to insert single character (from Normal mode)
nnoremap <Space> i_<C-[>r
" editing and sourcing vimrc live
nnoremap :ev :split $MYVIMRC<cr>
nnoremap :sv :source $MYVIMRC<cr>
" toggle search highlighting with Ctrl-H
nnoremap <c-h> :set hlsearch! hlsearch?<cr>
" count number of matching words under the cursor:
nnoremap ,* *<C-O>:%s///gn<CR>
" center view on cursor,
"   avoiding danger of entering 'ZZ' rather than 'zz'
nnoremap v zz
" return to file browser
nnoremap :re :Rexplore<cr>
" replace at beginning of line
nnoremap R 0r

" set syntax highlighting for screen:
au BufNewFile,BufRead *.scr set filetype=screen

" override default syntax highlighting ("config") for .bash_aliases:
au BufNewFile,BufRead bash_aliases set filetype=sh

" syntax highlighting for lilypond:
filetype off
"set runtimepath+=/usr/share/lilypond/2.16.2/vim/
set runtimepath+=/usr/share/lilypond/current/vim/
filetype on

" set syntax highlighting for varios RAT-PAX extensions to c++:
au BufNewFile,BufRead *.ratdb set filetype=cpp
au BufNewFile,BufRead *.geo set filetype=cpp
au BufNewFile,BufRead *.geo_* set filetype=cpp

" set syntax highlighting for ROOT:
function SetROOTsyntax()
  if and( getcwd()=~"root", &ft=="cpp" )
    set filetype+=.root
  endif
endfunction
au BufNewFile,BufRead *.cxx call SetROOTsyntax()
au BufNewFile,BufRead *.hh call SetROOTsyntax()

" set syntax highlighting for asymptote:
augroup filetypedetect
au BufNewFile,BufRead *.asy setf asy
augroup END
filetype plugin on

" create authorship macro
let @a='i ~ Mark J. Duvall ~ mjduvall@hawaii.edu ~ "=strftime("%m/%Y")pa ~ '

" create license macro
let @l=':r ~/GPLv3.txt3}2jI'

" create macro for paragraph/block 'uncomment'
let @u='^/^\s*$kx'

" create macros for various filetypes
" paragraph/block 'comment' and end-of-line 'debug':
" # languages
au filetypedetect FileType sh,awk,python let @c='^/^\s*$kI#' | let @d='A #debug' | let @g='@l#' | let @m='i##@a'
" % languages
au filetypedetect FileType tex,matlab,lilypond let @c='^/^\s*$kI%' | let @d='A %debug' | let @g='@l%' | let @m='i%%@a'
" " languages
au filetypedetect FileType vim let @c='^/^\s*$kI"' | let @d='A "debug' | let @g='@l"' | let @m='i""@a'
" ! languages
au filetypedetect FileType fortran let @c='^/^\s*$kI!' | let @d='A !debug' | let @g='@l!' | let @m='i!!@a'
" // languages
au filetypedetect FileType c,cpp,cpp.root,asy let @c='^/^\s*$kI//' | let @d='A //debug' | let @g='@l//' | let @m='i////h@a' | nnoremap R 02r
"au filetypedetect FileType c,cpp let @u='^/^\s*$klx'	" double-character uncomment

" all pau!   )

" vimrc -- startup customization options for vim

""Copyright (C) 2021 Mark J. Duvall
""
""    This program is free software: you can redistribute it and/or modify
""    it under the terms of the GNU General Public License as published by
""    the Free Software Foundation, either version 3 of the License, or
""    (at your option) any later version.
""
""    This program is distributed in the hope that it will be useful,
""    but WITHOUT ANY WARRANTY; without even the implied warranty of
""    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
""    GNU General Public License for more details.
""
""    You should have received a copy of the GNU General Public License
""    along with this program.  If not, see <http://www.gnu.org/licenses/>.

" basics
set background=dark	" set syntax highlighting for dark terminal backgrounds
syn on			" activate syntax highlighting
set shiftwidth=2	" indentation defaults to 2 spaces
set autoindent		" automatic indentation
" set 'p' as 'prev', so that ':n' and ':p' scroll forwards & backwards through open files:
cabbrev p prev
set ignorecase		" ignore case in searches
set smartcase		" don't ignore case when search string contains any uppercase
set shortmess-=S	" include count in search
set hlsearch

" wrapping:
set nowrap
"" alternate option: set wrap linebreak nolist -- hopefully, this will display breaks at words w/o altering the actual file
"" in a single command, 'Wrap':
command! Wrap set wrap linebreak nolist " 'list' is off by default; just making sure

" mapping:
" moving lines
noremap - ddp
noremap _ ddkP
" spacebar to insert single character (from Normal mode)
nnoremap <Space> i_<C-[>r
" editing and sourcing vimrc live
nnoremap :ev :split $MYVIMRC<cr>
nnoremap :sv :source $MYVIMRC<cr>
" toggle search highlighting with Ctrl-H
nnoremap <c-h> :set hlsearch! hlsearch?<cr>
" count number of matching words under the cursor:
nnoremap ,* *<C-O>:%s///gn<CR>
" avoid danger of entering 'ZZ' rather than 'zz':
nnoremap v zz
" return to file browser
nnoremap :re :Rexplore<cr>

" set syntax highlighting for screen:
au BufNewFile,BufRead *.scr set filetype=screen

" override default syntax highlighting ("config") for bash_aliases:
au BufNewFile,BufRead bash_aliases set filetype=sh

" set syntax highlighting for varios RAT-PAX extensions to c++:
au BufNewFile,BufRead *.ratdb set filetype=cpp
au BufNewFile,BufRead *.geo set filetype=cpp
au BufNewFile,BufRead *.geo_* set filetype=cpp

" set syntax highlighting for asymptote:
augroup filetypedetect
au BufNewFile,BufRead *.asy setf asy
augroup END
filetype plugin on
   
" create 'comment' and 'uncomment' macros for various filetypes
" uncomment:
let @u='^/^\s*$kx'
" comments:
" # languages
au filetypedetect FileType sh,awk,python let @c='^/^\s*$kI#'
" % languages
au filetypedetect FileType tex,matlab,lilypond let @c='^/^\s*$kI%'
" " languages
au filetypedetect FileType vim let @c='^/^\s*$kI"'
" ! languages
au filetypedetect FileType fortran let @c='^/^\s*$kI!'
" // languages
au filetypedetect FileType c,cpp let @c='^/^\s*$kI//'
"au filetypedetect FileType c,cpp let @u='^/^\s*$klx'	" double-character uncomment

" all pau!   )

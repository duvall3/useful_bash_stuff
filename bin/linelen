#!/bin/bash
# linelen -- Return the length (in number of characters) of the longest line in each of the input FILEs
# USAGE: linelen [-h|-sq|-v] <FILE>...
# ~ Mark J. Duvall ~ duvall3.git@gmail.com ~ 06/2023 ~ #

# Copyright (C) 2023 Mark J. Duvall / T. Rocks Science
# 
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 


## INIT

# general
NULL=/dev/null
ERR=/dev/stderr

# control for aliases
ECHO="$(which echo) -e"
AWK=$(which awk 2> $NULL)
AWK=${AWK:-$(which gawk 2> $NULL)}
AWK=${AWK:-$(which mawk 2> $NULL)}
if [ ! $AWK ]; then $ECHO "Error <linelen>: This program requires a working installation of Awk." > $ERR; fi
CAT=$(which cat 2> $NULL)
SORT=$(which sort 2> $NULL)
UNIQ=$(which uniq 2> $NULL)
TAIL=$(which tail 2> $NULL)
COLUMN=$(which column 2> $NULL)

# define usage
usage() {
  $ECHO "Usage: linelen [-h|-sq|-v] <FILE>..."
  $ECHO "Return the length (in number of characters) of the longest line in each of the input FILEs"
  $ECHO
  $ECHO "Options:"
  $ECHO "  -h\tShow this help message and exit"
  $ECHO "  -s\tList output by length of longest line rather than by argument order"
  $ECHO "  -q\tQuiet mode: suppress header"
  $ECHO "  -v\tVerbose mode: Print the character count for every line in each file"
  $ECHO
}

# process options
SORT_BY_MAX_LENGTH=false
QUIET=false
VERBOSE=false
while getopts "hsqv" OPTIONS; do
  case $OPTIONS in
    h)
      usage
      exit 10
      ;;
    s)
      SORT_BY_MAX_LENGTH=true
      ;;
    q)
      QUIET=true
      ;;
    v)
      VERBOSE=true
      ;;
    *)
      $ECHO
      usage
      exit 11
      ;;
  esac
done
shift $((OPTIND-1)) # uncomment for options with args

# process args
if [ $# -lt 1 ]; then
  usage
  exit 5
else
  FILENAMES=$@
fi

# define functions and parameters depending on bool $VERBOSE
if $VERBOSE; then
  # verbose mode
  HEADER=""
  DELIM=": "
  printfilename() {
    $ECHO "$FILE:"
  }
  outformat() {
    $CAT
  }
  table() {
    $CAT
  }
else
  # default mode
  HEADER="FILE LINE LENGTH"
  DELIM=" "
  printfilename() {
    $ECHO -n "$FILE "
  }
  outformat() {
    $SORT -nk 2 | $UNIQ -f 1 | $TAIL -n 1
  }
  if $SORT_BY_MAX_LENGTH; then
    # alternate sort (maximum length)
    table() {
      {
        if ! $QUIET; then $ECHO $HEADER; fi
	$AWK '$2 ~ "[[:digit:]]+"' | $SORT -k 3
      } | $COLUMN -t
    }
  else
    # default sort (input order)
    table() {
      $COLUMN -t
    }
  fi
fi


## MAIN
K=1
for FILE in ${FILENAMES[*]}; do
  if ( [ $K -eq 1 ] ) && (! $QUIET); then $ECHO $HEADER; fi
  printfilename
  $AWK -v delim=$DELIM '{match($0, ".*"); printf "%6d%s%6d\n",NR,delim,RLENGTH}' $FILE | outformat
  EXIT_STATUS=$?
  if $VERBOSE; then $ECHO; fi
  ((K++))
done | table


## EXIT

# all pau!   )
EXIT_STATUS=${EXIT_STATUS:-0}
exit $EXIT_STATUS


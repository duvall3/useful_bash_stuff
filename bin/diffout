#!/bin/bash
# diffout -- Compare the outputs of a pair of commands and report whether they differ.
# NOTE: This simple script is best used for quick checks with light programs;
#   it is NOT RECOMMENDED for commands that will run extensive computations
#   or produce large amounts of output.
# NOTE: Depending on options, this script may run your commands twice.
# USAGE: diffout -[h|d|y|q] <COMMAND1> <COMMAND2>
# ~ Mark J. Duvall ~ duvall3.git@gmail.com ~ 10/2023 ~ #

# Copyright (C) 2023 Mark J. Duvall / T. Rocks Science
# 
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 


## INIT

# general
NULL=/dev/null
ERR=/dev/stderr

# control for aliases
ECHO="$(which echo) -e"
DIFF=$(which diff)
CUT=$(which cut)

# define usage
usage() {
  $ECHO "Usage: diffout -[h|d|y|q] <COMMAND1> <COMMAND2>"
  $ECHO "Compare the outputs of a pair of commands and report whether they differ."
  $ECHO "  Multi-word commands must be quoted."
  $ECHO "  Returns 0 if outputs match and 1 if outputs differ."
  $ECHO "Options:"
  $ECHO "  -h\tShow this help message and exit"
  $ECHO "  -d\tShow results in standard 'diff' format"
  $ECHO "  -y\tShow results in 'diff -y' (side-by-side) format"
  $ECHO "  -q\tSuppress output (useful in scripts that only need the exit status"
  $ECHO
}

# process options
PRINT_REPORT=true
PRINT_FORMAT=""
while getopts "hdyq" OPTIONS; do
  case $OPTIONS in
    h)
      usage
      exit 10
      ;;
    d)
      PRINT_FORMAT="-d"
      shift
      ;;
    y)
      PRINT_FORMAT="-y"
      shift
      ;;
    q)
      PRINT_REPORT=false
      shift
      ;;
    *)
      $ECHO
      usage
      exit 11
      ;;
  esac
done
# shift $((OPTIND-1)) # uncomment for options with args

# process args
if [ $# -gt 3 ]; then usage; exit 3; fi


## MAIN

# define report()
report() {
  if [ $1 -eq 0 ]; then
    $ECHO "Outputs match."
  else
    $ECHO "Outputs differ."
  fi
}

##DEBUG: check args and options
#echo "\$1 = \"$1\"" #debug
#echo "\$2 = \"$2\"" #debug
#echo "\$PRINT_REPORT = $PRINT_REPORT"
#echo "\$PRINT_FORMAT = $PRINT_FORMAT"
#exit 100 #debug

# run commands and compare output
CMD1_OUT=$($1 2> $NULL)
CMD1_EXIT=$?
CMD2_OUT=$($2 2> $NULL)
CMD2_EXIT=$?

# check for missing commands
MISSINGCO=false
if [ $CMD1_EXIT -eq 127 ]; then
  MISSING_WORD=$($ECHO $1 | $CUT -d ' ' -f 1)
  $ECHO "Error: Command \"$MISSING_WORD\" not found." > $ERR
  MISSINGCO=true
fi
if [ $CMD2_EXIT -eq 127 ]; then
  MISSING_WORD=$($ECHO $2 | $CUT -d ' ' -f 1)
  $ECHO "Error: Command \"$MISSING_WORD\" not found." > $ERR
  MISSINGCO=true
fi
if $MISSINGCO; then exit 127; fi

# check for empty outputs
if [[ $CMD1_OUT ]]; then
  if [[ ! $CMD2_OUT ]]; then $ECHO "Warning: Second output is empty." > $ERR; fi
elif [[ $CMD2_OUT ]]; then
  $ECHO "Warning: First output is empty." > $ERR
else
  $ECHO "Both outputs are empty."
  exit 0
fi

# compare outputs
if [[ $CMD1_OUT = $CMD2_OUT ]]; then
  EXIT_STATUS=0
else
  EXIT_STATUS=1
fi

# report results
# if $PRINT_REPORT; then report $EXIT_STATUS; fi 	#ORIGINAL
if $PRINT_REPORT; then
  if [ -z $PRINT_FORMAT ]; then
    report $EXIT_STATUS
  else
    $DIFF $PRINT_FORMAT <($1) <($2)
  fi
fi


## EXIT

# all pau!   )
EXIT_STATUS=${EXIT_STATUS:-0}
exit $EXIT_STATUS


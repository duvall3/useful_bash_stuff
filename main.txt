Useful BASH Stuff -- Tips, Tricks, & Other Delights
==================================================================


Favorites
~~~~~~~~~


#0: tab completion & command history: if you're reading this document, you already know about these

#1: <Alt+.> -- argument history: paste recent arguments
  -- example: starting work on a new shell script: "touch reallylongfilename.sh; chmod 755 <Alt+.>; vim <Alt+.>"

#2: arrow-key command history search -- <up/down> : waaay better than default behavior, instructions coming soon

#3: <Ctrl+/> -- "undo" for your command line -- works on typing, pasting, history search, pretty much everything!

-- It's worth noting that all my top favorites listed so far are part of the GNU Readline library. Thanks, readline!!!


In no particular order:

- find | xargs -- find files matching given criteria & operate on them; basic syntax is "find [path] [expression] -print0 | xargs -0 <command>"
  -- books have been written on this, but as a very basic example:
    "find ~ -ctime -1 -print0 | xargs -0 stat" will find all files in your home folder
    that have been accessed/modified in the last day and print their stats

- "target" option for copy & move: "cp -t <target_directory> <file1> [file2 file3 ...]" (same for "mv")
  -- this helps prevent mixups when copying/moving multiple files (or directories)
  -- especially useful when piping multiple files into cp/mv, since some piping syntaxes will screw up the order

- ssh escape control: terminate frozen ssh connection via "<Return>~."

- terminate other login (e.g., frozen shell session): pkill -9 -t <tty>

- rename tool for multiple files: rename s/<pattern1>/<pattern2>/[flags] <files>
  -- example: rename all .png files in current directory to have any spaces in their names replaced with underscores:
     user@host:~$ rename s/" "/_/g *.png




Vim
~~~~~~~~~~

- jump to line N: in normal mode, ":N"

- jump to matching bracket -- works for all ([{}]) : in normal mode, "%"

- repeat input: in normal mode, "." will repeat everything you typed the last time you were in input mode
  -- can be prefixed with a number for repetition
  -- example: normal mode -> "i" -> type a template for some records you want to enter -> <Esc> -> "5."
      --> now you have 5 copies of your template, and you can just go fill in the blanks

- autocomplete: in insert mode, "<Ctrl+N>" (next) to start at top of list or "<Ctrl+P>" (previous) to start at bottom of list

- special characters: in insert mode, <Ctrl+k> -> mod key -> letter
  -- example: <Ctrl+k>'e --> Ã©

- Vim block insert/delete: use 
  block insert: in normal mode, <Ctrl+V> -> highlight block using arrow keys -> <Shift+I> -> type -> <Esc>
  block delete:          "         "                       "                 -> x (delete) or d (cut)

- quick command: while in insert mode, <Ctrl+O> -> "command"
  -- vim will execute a single command, then drop you back into insert mode
  -- example: this is great for saving while editing: <Ctrl+O>:w<Enter> will save your work, then you can resume instantly


